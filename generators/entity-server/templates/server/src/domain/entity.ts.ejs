/* eslint-disable @typescript-eslint/no-unused-vars */
import { Entity, Column, PrimaryGeneratedColumn, JoinColumn, OneToOne, ManyToOne, OneToMany, ManyToMany, JoinTable } from 'typeorm';
import { BaseEntity } from './base/base.entity';
<%
let importApiModelProperty = true;
let importJsonIgnore = false;
let importJsonIgnoreProperties = false;
let importSet = false;
let hasDto = dto === 'mapstruct';
let isUserRelationship = false;
const uniqueEntities = {};
const uniqueEnums = {}; %><%- include imports -%>
<%_ if (!hasDto && importApiModelProperty === true) { _%>
import { ApiModelProperty } from '@nestjs/swagger';
<%_ } if (validation) { _%>
import {validate, Contains, IsInt, Length, IsEmail, IsFQDN, IsDate, Min, Max} from "class-validator";
<%_ } _%>

<%_ Object.keys(uniqueEntities).forEach(function(entityClass) { _%>
import <%= entityClass %> from './<%= uniqueEntities[entityClass] %>.entity';
<%_ }); _%>
<%_ Object.keys(uniqueEnums).forEach(function(enumClass) { _%>
import { <%= enumClass %> } from './enumeration/<%= uniqueEnums[enumClass] %>';
<%_ }); _%>

<%_ if (isUserRelationship === true) { _%>
import { User } from './user.entity';
<%_ } _%>

<%_ if (typeof javadoc == 'undefined') { _%>
/**
 * A <%= asEntity(entityClass) %>.
 */
<%_ } else { _%>
<%- formatAsClassJavadoc(javadoc) %>
<%_ } _%>
@Entity('<%= entityTableName %>')
export default class <%= asEntity(entityClass) %> extends BaseEntity  {

<%_ for (idx in fields) {
    if (typeof fields[idx].javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(fields[idx].javadoc) %>
    <%_ }
    let required = false;
    let unique = false;
    const fieldValidate = fields[idx].fieldValidate;
    const fieldValidateRules = fields[idx].fieldValidateRules;
    const fieldValidateRulesMaxlength = fields[idx].fieldValidateRulesMaxlength;
    const fieldType = fields[idx].fieldType;
    const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    const fieldName = fields[idx].fieldName;
    const fieldNameUnderscored = fields[idx].fieldNameUnderscored;
    const fieldNameAsDatabaseColumn = fields[idx].fieldNameAsDatabaseColumn;
    const fieldColumnType=addDbType(fieldType);
    if (fieldValidate === true) {
        if (fieldValidateRules.includes('required')) {
            required = true;
        }
        if (fieldValidateRules.includes('unique')) {
            unique = true;
        } _%>
    <%- include ../common/field_validators -%>
    <%_ } _%>
    <%_ if (!hasDto && typeof fields[idx].javadoc != 'undefined') { _%>
    @ApiModelProperty({type: '', description: '<%- formatAsApiDescription(fields[idx].javadoc) %>'<% if (required) { %>, required: true<% } %>})
    <%_ } _%>
        <%_ if (fields[idx].fieldIsEnum) { _%>
    @Column({type: 'simple-enum', name: '<%-fieldNameAsDatabaseColumn %>', enum: <%= fieldType %>})
        <%_ } else if (['Instant', 'ZonedDateTime', 'LocalDate'].includes(fieldType)) { _%>
    @Column({<%_ if(fieldColumnType) { _%> type: '<%-fieldColumnType%>' ,<%_ }_%> name: "<%-fieldNameAsDatabaseColumn %>"<% if (!required) { %>, nullable: true<% } %><% if (unique) { %>, unique: true<% } %>})
        <%_ } else if (fieldType === 'BigDecimal') { _%>
    @Column({<%_ if(fieldColumnType) { _%> type: '<%-fieldColumnType%>' ,<%_ }_%> name: "<%-fieldNameAsDatabaseColumn %>", precision : 10, scale : 2<% if (!required) { %>, nullable: true<% } %><% if (unique) { %>, unique: true<% } %>})
        <%_ } else { _%>
    @Column({<%_ if(fieldColumnType) { _%> type: '<%-fieldColumnType%>' ,<%_ }_%>  name: "<%-fieldNameAsDatabaseColumn %>"<% if (fieldValidate === true) { %><% if (fieldValidateRules.includes('maxlength')) { %>, length: <%= fieldValidateRulesMaxlength %><% } %> <% } %><% if (!required) { %>, nullable: true<% } %><% if (unique) { %>, unique: true<% }%>})
        <%_ } _%>
        <%_ if (fields[idx].fieldIsEnum) { _%>
    <%= fieldName %>: <%= fieldType %>;
        <%_ } else { _%>
    <%= fieldName %>: <%= getTsType(fieldType) %>;
        <%_ } _%>

    <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>
    @Column({name: '<%-fieldNameAsDatabaseColumn %>_content_type'<% if (!required) { %>, nullable: true<% } %>})
    <%= fieldName %>ContentType: string;
    <%_ }
    } _%>

    <%_
    for (idx in relationships) {
        const relationship = relationships[idx];
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;

        if (typeof relationships.javadoc != 'undefined') { _%>
<%- formatAsFieldJavadoc(relationships.javadoc) %>
            <%_ if (!hasDto) { _%>
    @ApiModelProperty({description = "<%- formatAsApiDescription(relationships.javadoc) %>"})
            <%_ }_%>
    <%_ }
        if (relationshipType === 'one-to-many') {_%>
    @OneToMany(type => <%= relationship.otherEntityAngularName %> <%_ if (isUserRelationship === false) { _%>, other => other.<%= otherEntityRelationshipName %><%_ } _%>)
    <%= relationshipFieldNamePlural %>: <%= relationship.otherEntityAngularName %>[];

    <%_ } else if (relationshipType === 'many-to-one') { _%>
    @ManyToOne(type => <%= relationship.otherEntityAngularName %> <%_ if (ownerSide === true && isUserRelationship === false ) { _%>, other => other.<%= otherEntityRelationshipNamePlural %>  <%_ } _%>)
    <%= relationshipFieldName %>: <%= relationship.otherEntityAngularName %>;

    <%_ } else if (relationshipType === 'many-to-many') { _%>
    @ManyToMany(type => <%= relationship.otherEntityAngularName %> )
        <%_ if (ownerSide === true) { _%>
    @JoinTable({
        name: '<%= joinTableName %>',
        joinColumn: { name: '<%= getColumnName(name) %>_id', referencedColumnName: "id" },
        inverseJoinColumn: { name: '<%= getColumnName(relationship.relationshipName) %>_id', referencedColumnName: "id" }
    })
        <%_ } _%>
    <%= relationshipFieldNamePlural %>: <%= relationship.otherEntityAngularName %>[];

    <%_ } else { _%>
    @OneToOne(type => <%= relationship.otherEntityAngularName %>)
    <%_ if (ownerSide === true) { _%>@JoinColumn()<%_ } _%>
    <%= relationshipFieldName %>: <%= relationship.otherEntityAngularName %>;

    <%_ }
    } _%>
    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove

}
