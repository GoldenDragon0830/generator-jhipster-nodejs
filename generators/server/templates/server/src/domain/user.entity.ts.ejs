import { Authority } from './authority.entity';
import { Entity, Column, ManyToMany, JoinTable } from 'typeorm';
import { BaseEntity } from './base/base.entity';
import { Exclude as JsonIgnore } from 'class-transformer';
import { ApiModelProperty } from '@nestjs/swagger';

@Entity('jhi_user')
export class User extends BaseEntity {
  @ApiModelProperty({ example: 'admin', description: 'User login' })
  @Column()
  login?: string;
  @ApiModelProperty({ example: 'Smith', description: 'User first name' })
  @Column()
  firstName?: string;
  @Column()
  lastName?: string;
  @Column()
  email?: string;
  @Column()
  activated?: boolean;
  @Column()
  langKey?: string;


  @ManyToMany(type => Authority)
  @JoinTable()
  authorities?: Authority[];

  @Column()
  createdBy?: string;
  @Column({nullable: true} )
  createdDate?: Date;
  @Column()
  lastModifiedBy?: string;
  @Column({nullable: true} )
  lastModifiedDate?: Date;

  @JsonIgnore()
  @Column()
  passwordHash?: string;
  @Column()
  imageUrl?: string;
  @Column({nullable: true} )
  activationKey?: string;
  @Column({nullable: true} )
  resetKey?: string;
  @Column({nullable: true} )
  resetDate?: Date;


}

/* export const userSchema = {
  id: { type: 'string', required: false, example: '1' },
  firstName: { type: 'string', required: false, example: 'Ivan' },
  lastName: { type: 'string', required: false, example: 'Garcia Sainz-Aja' },
  email: { type: 'string', required: true, example: 'ivangsa@gmail.com' },
};
*/
