import { Body, Controller, Delete, Get, Logger, Param, Post as PostMethod, Put, UseGuards, Req, UseInterceptors } from '@nestjs/common';
import { <% if (authenticationType === 'jwt') { _%> ApiBearerAuth, <% } else if (authenticationType === 'oauth2') { _%> ApiOAuth2Auth, <% } _%> ApiUseTags, ApiResponse, ApiOperation } from '@nestjs/swagger';
import { <%= entityClass %>DTO } from '../../service/dto/<%= entityFileName %>.dto';
import { <%= entityClass %>Service } from '../../service/<%= entityFileName %>.service';
import { PageRequest, Page } from '../../domain/base/pagination.entity';
import { AuthGuard, Request, Roles, RolesGuard, RoleType } from '../../security';
import { HeaderUtil } from '../../client/header-util';
import { LoggingInterceptor } from '../../client/interceptors/logging.interceptor';

@Controller('api/<%= entityApiUrl %>')
@UseGuards(AuthGuard, RolesGuard)
@UseInterceptors(LoggingInterceptor)
<%_ if (authenticationType === 'jwt') { _%>
@ApiBearerAuth()
<%_ } else if (authenticationType === 'oauth2') { _%>
@ApiOAuth2Auth()
<%_ } _%>
@ApiUseTags('<%= entityApiUrl %>')
export class <%= entityClass %>Controller {
  logger = new Logger('<%= entityClass %>Controller');

  constructor(private readonly <%= asEntity(entityInstance) %>Service: <%= entityClass %>Service) {}


  @Get('/')
  @Roles(RoleType.USER)
  @ApiResponse({
    status: 200,
    description: 'List all records',
    type: <%= entityClass %>DTO,
  })
  async getAll(@Req() req: Request): Promise<<%= entityClass %>DTO []>  {
    const pageRequest: PageRequest = new PageRequest(req.query.page, req.query.size, req.query.sort);
    const [results, count] = await this.<%= asEntity(entityInstance) %>Service.findAndCount({
      skip: +pageRequest.page * pageRequest.size,
      take: +pageRequest.size,
      order: pageRequest.sort.asOrder(),
    });
    HeaderUtil.addPaginationHeaders(req.res, new Page(results, count, pageRequest));
    return results;
  }

  @Get('/:id')
  @Roles(RoleType.USER)
  @ApiResponse({
    status: 200,
    description: 'The found record',
    type: <%= entityClass %>DTO,
  })
  async getOne(@Param('id') id: string): Promise<<%= entityClass %>DTO>  {
    return await this.<%= asEntity(entityInstance) %>Service.findById(id);
  }

  @PostMethod('/')
  @Roles(RoleType.ADMIN)
  @ApiOperation({ title: 'Create <%= asEntity(entityInstance) %>' })
  @ApiResponse({
    status: 201,
    description: 'The record has been successfully created.',
    type: <%= entityClass %>DTO,
  })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  async post(@Req() req: Request, @Body() <%= asEntity(entityInstance) %>DTO: <%= entityClass %>DTO): Promise<<%= entityClass %>DTO>  {
    const created = await this.<%= asEntity(entityInstance) %>Service.save(<%= asEntity(entityInstance) %>DTO, req.user?.login);
    HeaderUtil.addEntityCreatedHeaders(req.res, '<%= entityClass %>', created.id);
    return created;
  }

  @Put('/')
  @Roles(RoleType.ADMIN)
  @ApiOperation({ title: 'Update <%= asEntity(entityInstance) %>' })
  @ApiResponse({
    status: 200,
    description: 'The record has been successfully updated.',
    type: <%= entityClass %>DTO,
  })
  async put(@Req() req: Request, @Body() <%= asEntity(entityInstance) %>DTO: <%= entityClass %>DTO): Promise<<%= entityClass %>DTO>  {
    HeaderUtil.addEntityCreatedHeaders(req.res, '<%= entityClass %>', <%= asEntity(entityInstance) %>DTO.id);
    return await this.<%= asEntity(entityInstance) %>Service.update(<%= asEntity(entityInstance) %>DTO, req.user?.login);
  }

  @Put('/:id')
  @Roles(RoleType.ADMIN)
  @ApiOperation({ title: 'Update <%= asEntity(entityInstance) %> with id' })
  @ApiResponse({
    status: 200,
    description: 'The record has been successfully updated.',
    type: <%= entityClass %>DTO,
  })
  async putId(@Req() req: Request, @Body() <%= asEntity(entityInstance) %>DTO: <%= entityClass %>DTO): Promise<<%= entityClass %>DTO>  {
    HeaderUtil.addEntityCreatedHeaders(req.res, '<%= entityClass %>', <%= asEntity(entityInstance) %>DTO.id);
    return await this.<%= asEntity(entityInstance) %>Service.update(<%= asEntity(entityInstance) %>DTO, req.user?.login);
  }

  @Delete('/:id')
  @Roles(RoleType.ADMIN)
  @ApiOperation({ title: 'Delete <%= asEntity(entityInstance) %>' })
  @ApiResponse({
    status: 204,
    description: 'The record has been successfully deleted.',
  })
  async deleteById(@Req() req: Request, @Param('id') id: string): Promise<void>  {
    HeaderUtil.addEntityDeletedHeaders(req.res, '<%= entityClass %>', id);
    return await this.<%= asEntity(entityInstance) %>Service.deleteById(id);
  }
}
