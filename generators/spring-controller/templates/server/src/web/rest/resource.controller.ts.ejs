import { Body, Controller, Delete, Get, Logger, Param, Post as PostMethod, Put, UseGuards, Req, UseInterceptors } from '@nestjs/common';
import { ApiBearerAuth, ApiUseTags, ApiResponse, ApiOperation } from '@nestjs/swagger';
import { Request } from 'express';
import { AuthGuard, Roles, RolesGuard, RoleType } from '../../security';
import { LoggingInterceptor } from '../../client/interceptors/logging.interceptor';

@Controller('api/<%= controllerFileName %>s')
@UseGuards(AuthGuard, RolesGuard)
@UseInterceptors(LoggingInterceptor)
@ApiBearerAuth()
@ApiUseTags('<%= controllerFileName %>s')
export class <%= controllerClass %>Controller {
  logger = new Logger('<%= controllerClass %>Controller');

  constructor() {}

  @Get('/')
  @Roles(RoleType.USER)
  @ApiResponse({
    status: 200,
    description: 'List all records'
  })
  async getAll(@Req() req: Request): Promise<any>  {
   return new Promise();
  }

  @Get('/:id')
  @ApiResponse({
    status: 200,
    description: 'The found record'
  })
  async getOne(@Param('id') id: string): Promise<any>  {
    return new Promise();
}

  @PostMethod('/')
  @ApiOperation({ title: 'Create ' })
  @ApiResponse({
    status: 201,
    description: 'The record has been successfully created.'
  })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  async post(@Req() req: Request, @Body() any: any): Promise<any>  {
    return new Promise();
}

  @Put('/')
  @ApiOperation({ title: 'Update ' })
  @ApiResponse({
    status: 200,
    description: 'The record has been successfully updated.'
  })
  async put(@Req() req: Request, @Body() any: any): Promise<any> {
    return new Promise();
}

  @Delete('/:id')
  @ApiOperation({ title: 'Delete ' })
  @ApiResponse({
    status: 204,
    description: 'The record has been successfully deleted.',
  })
  async remove(@Req() req: Request, @Param('id') id: string): Promise<any>  {
   return new Promise();
  }
}
