import { Authority } from './authority.entity';
import { Entity, Column<%_ if (authenticationType === 'jwt') { _%>, BeforeInsert, BeforeUpdate<%_ } _%> <%_ if (databaseType !== 'mongodb') { _%>, ManyToMany, JoinTable <%_ } _%> } from 'typeorm';
import { BaseEntity } from './base/base.entity';
<%_ if (authenticationType === 'jwt') { _%>
import * as bcrypt from 'bcrypt';
import { config } from '../config';
<% } %>

@Entity('nhi_user')
export class User extends BaseEntity {
  @Column({ unique: true })
  login: string;
  @Column({ nullable: true })
  firstName?: string;
  @Column({ nullable: true })
  lastName?: string;
  @Column()
  email: string;
  @Column({ default: false})
  activated?: boolean;
  @Column({default: 'en'})
  langKey?: string;

  <%_ if (databaseType === 'mongodb') { _%>
  @Column()
  authorities?: Authority[];
  <%_ } else { _%>
  @ManyToMany(() => Authority)
  @JoinTable()
  authorities?: any[];
  <%_ } _%>

  @Column({
    type: "varchar",
    select: false
  })
  password: string;
  @Column({ nullable: true })
  imageUrl?: string;
  @Column({ nullable: true })
  activationKey?: string;
  @Column({ nullable: true })
  resetKey?: string;
  @Column({ nullable: true })
  resetDate?: Date;

<%_ if (authenticationType === 'jwt') { _%>
  @BeforeInsert()
  @BeforeUpdate()
  async hashPassword?(): Promise<void> {
    if (this.password) {
      this.password = await bcrypt.hash(this.password, config.get('jhipster.security.authentication.jwt.hash-salt-or-rounds'));
    }
  }
<%_ } _%>
}
